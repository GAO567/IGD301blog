[{"content":"PRECIOUS PRECIOUS: Progressive REfinement using Cone-casting in Immersive virtual environments for Out-of-reach object Selection. This technique resorts a flash light casted from user\u0026rsquo;s hand. Users can control the aperture to select the objects. Bob is standing in a abit far distance to the shelves and he want to select 4 colas. He doesn\u0026rsquo;t want to move by foot since he is so lazy. So he need to use an out of reach method. He decide to use PRECIOUS since it\u0026rsquo;s quick and can select mutiple objects in a far distance. He first cast the falsh light to the cola\u0026rsquo;s direction then he shrink the aperture and get the 4 colas. Hand Bubble This technique can generate a bubble on user\u0026rsquo;s hand. Users can control the volume of this bubble.\nAlex stood by the shelf for a long time. She wanted to get her hands on the two packets of chips hidden by other flavors. She can use Hand Bubble to get them. First she reach her hands to the hidden chips then she resize the bubble to select only 2 packets. Menu Users can use raycast to select a shelf and then generate a menu of this shelf. Users can then select the objects on the menu.\nTailuo wants to buy a lot of things. Why not just give him a menu? He first point one shelf with raycast light. Then he select the things and amount on menu. And all the selected things fly to him. ","permalink":"/posts/lecture4/","summary":"Three selection techniques in a supermarket.","title":"Class homework 4: Selecting Objects in a supermarket"},{"content":"EyeSQUAD It\u0026rsquo;s a novel selection technique with eye tracking–Eye-controlled Sphere-casting refined by QUAD-menu. EyeSQUAD is divided into two subtasks: sphere-casting and quad-menu refinement. For the sphere-casting subtask, EyeSQUAD allows the user to control the selection sphere with eyes by calculating the convergence point from the user’s eye ray data. Once the sphere-casting selection has been triggered, the set of objects inside it are evenly and randomly distributed on an out-of-context quad-menu. Users then refine the set of selectable objects by gazing in the direction of the quadrant that contains the target and trigger the selection again. Reach - Infinite It uses the spherer-casting to get a set of objects. Cardinality - Multiple: It first select a set of objects then refine to get the target. Progressive Refinement - Discrete → Iterative: It select the target by iteratively reducing the number of candidate objects by 4 until find the final one. Ref: Wang Y, Kopper R. Efficient and Accurate Object 3D Selection With Eye Tracking-Based Progressive Refinement[J]. Frontiers in Virtual Reality, 2021, 2: 607165.\nHandDepthCursor HandDepthCursor uses raycasting as the selection mechanism. The use can go deeper and move back to the densely cluttered environment via two non-dominant hand gestures. To go deeper, the user can point her index finger to the front. To come close, the user can point her thumb to the back. Reach - Infinite It uses the raycasting to select an object. Cardinality - Single: The depth cursor is used to move the cursor in the densely cluttered environment rahter than selecting a set of objects. It still use raycasting to select one object. Progressive Refinement - Continuous: It gradually changes the cursor depth to see the hidden object. Then use raycasting to select it. Ref: Shi R, Zhang J, Yue Y, et al. Exploration of Bare-Hand Mid-Air Pointing Selection Techniques for Dense Virtual Reality Environments[C]//Extended Abstracts of the 2023 CHI Conference on Human Factors in Computing Systems. 2023: 1-7.\nMultiFingerBubble MultiFingerBubble allows users to control a semi-transparent sphere by mapping the hand position onto the sphere position. The sphere can contain multiple targets - up to four. Each target is linked to a specific finger. Users can then select the desired target by flexing the corresponding finger.\nReach - Infinite It casts a sphere to contain the targets. Cardinality - Single: It can only select one object. Progressive Refinement - Discrete → Single Step: MultiFingerBubble includes mutliple targets in the volume selection. Each target in the volume selection is associated with a specific finger. Users can select a target by flexing its corresponding finger. Ref: Delamare W, Daniel M, Hasan K. MultiFingerBubble: A 3D Bubble Cursor Variation for Dense Environments[C]//CHI Conference on Human Factors in Computing Systems Extended Abstracts. 2022: 1-6.\n","permalink":"/posts/lecture3/","summary":"Introduce three selection techniques: EyeSQUAD,HandDepthCursor and MultiFingerBubble.","title":"Selection techniques"},{"content":"Roll-a-ball is a learning project for Unity beginners. In this learning project, you\u0026rsquo;ll use Unity Editor and its built-in capabilities to set up a simple game environment and write your own custom scripts to create the game functionality.\nTo begin with, let\u0026rsquo;s first create a new Unity project and name it as \u0026ldquo;Roll-a-ball\u0026rdquo;. Create a new scene and name it as roll-a-ball. Add a plane object as the \u0026ldquo;Ground\u0026rdquo;. Create a material for the ground. Change material color and drag it to the \u0026ldquo;Ground\u0026rdquo; object. Follow the previous steps, create a sphere object as the \u0026ldquo;Player\u0026quot;and also add a material and Rigidbody to it. Adjust the right Transform to put the ball on the ground. In this project, we use Unity Input System to control Player with arrow keys. First open the Package Manager and find Input System. Install it! Then add Player input component to \u0026ldquo;Player\u0026rdquo; and create a new action. Create a new C# script as PlayerController.\nPlayerController.cs:\nusing System.Collections; using System.Collections.Generic; using UnityEngine; using UnityEngine.InputSystem; public class PlayerController : MonoBehaviour { public float speed = 0; private Rigidbody rb; private float movementX; private float movementY; // Start is called before the first frame update void Start() { rb = this.GetComponent\u0026lt;Rigidbody\u0026gt;(); } void OnMove(InputValue movementValue) { Vector2 movementVector = movementValue.Get\u0026lt;Vector2\u0026gt;(); movementX = movementVector.x; movementY = movementVector.y; } private void FixedUpdate() { Vector3 movement = new Vector3(movementX, 0.0f, movementY); rb.AddForce(movement * speed); } } We also want to let the camera follow the moving player. So let\u0026rsquo;s add a CameraController.cs to Main Camera. CameraController.cs:\nusing System.Collections; using System.Collections.Generic; using UnityEngine; public class CameraController : MonoBehaviour { public GameObject player; private Vector3 offset; // Start is called before the first frame update void Start() { offset = transform.position - player.transform.position; } // Update is called once per frame void LateUpdate() { transform.position = player.transform.position + offset; } } We want to limit the \u0026ldquo;Player\u0026rdquo; in the area of ground so let\u0026rsquo;s create 4 walls under an empty object \u0026ldquo;Walls\u0026rdquo;. Let\u0026rsquo;s add some rotating pick-ups so that player can hit the pick-up and get score. Let\u0026rsquo;s create a pick-up tagged with pockups as prefab and duplicate it.\nFor Player, we add OnTruggerEnter to PlayerController.cs so that the pickups will disappear after being hitted.\nprivate void OnTriggerEnter(Collider other) { if (other.gameObject.CompareTag(\u0026#34;pickups\u0026#34;)) { other.gameObject.SetActive(false); } } For this pick-up, we\u0026rsquo;ll:\nadd Rotator.cs using System.Collections; using System.Collections.Generic; using UnityEngine; public class Rotator : MonoBehaviour { // Start is called before the first frame update void Start() { } // Update is called once per frame void Update() { transform.Rotate(new Vector3(15, 30, 45) * Time.deltaTime); } } In Box Collider component check Is Trigger In Rigidbody component uncheck Use Gravity check Is Kinematic Let\u0026rsquo;s create a UI to show scores and show Win! after some hits! What we need are 2 Text - TextMeshPro. One for CountText and the other for WinText. To update the CountText and display WinText after some hits,let\u0026rsquo;s add a few lines to PlayerController.cs.\nusing TMPro; //reference the namespace ... public TextMeshProUGUI countText; public GameObject winTextObject; ... void Start() { ... count = 0; SetCountText(); //set count to 0 winTextObject.SetActive(false); //hide Wintext } void SetCountText() { countText.text = \u0026#34;Count: \u0026#34; + count.ToString(); //set count if(count \u0026gt;= 18) { winTextObject.SetActive(true); //display WinText after 18 hits } } private void OnTriggerEnter(Collider other) { if (other.gameObject.CompareTag(\u0026#34;pickups\u0026#34;)) { other.gameObject.SetActive(false); count += 1; SetCountText(); // increase the count when hit and update CountText } } More features I call it Roll-a-ball:Endless. After each win, player gets the ability to jump from current ground. So that player can play this game again and again and again.\nvoid OnJump() { if(count \u0026gt;= 18) {//player can jump only after winning rb.AddForce(new Vector3(0, 10 * speed, 0)); } } void CreateNewGround() { //Instantiate new ground and new pick-ups GameObject ground = Instantiate(groundPrefab, new Vector3(0, -15*level, 0), Quaternion.identity); ground.transform.localScale = new Vector3(2*(level + 1), 1, 2* (level + 1)); for(int i = 0; i \u0026lt; 18; i++) { Vector3 randomPosition = new Vector3(Random.Range(-9f*(level+1),9f*(level+1)), 0.5f-level*15f, Random.Range(-9f* (level + 1), 9f* (level + 1))); Instantiate(pickupPrefab, randomPosition, Quaternion.identity); } } ","permalink":"/posts/lab3/","summary":"Create a Unity game: Roll a ball","title":"Roll-a-ball"},{"content":"Download Unity Hub First, go to Unity website to download a Unity Hub. Install Unity Hub and open it. Install Unity Login to the Unity Hub. Press the Installs tab on the left menu and press Install Editor. Then select a suitable Unity version, select Android Build Support for Oculus Quest developing. Create new project Press the Projects tab to see the projects list. Click the New project button to create a new project.\nIn this lab, we use the 3D template, name it and choose a proper project location. Then press Create project button to create this project and you have a new unity project to play around! ","permalink":"/posts/lab/","summary":"Setup Unity and create Unity project","title":"Setup Unity"}]